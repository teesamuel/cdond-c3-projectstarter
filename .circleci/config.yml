version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment << parameters.workflow_id >>"
            aws s3 rm s3://udapeople-<< parameters.workflow_id >>  --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id  >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id  >>
 

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string  
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/MYFraaU6BVZSEVAq6i97f4/migration_<< parameters.workflow_id >>)
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi  
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Test Front-end
          command: |
            cd frontend
            npm install
            npm run test 
                
  test-backend:
    docker:
        - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Test Back-end
          command: |
            cd backend
            npm install
            npm run test 
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm install
            npm audit fix  --audit-level=critical
      # Checkout code from git
      # Restore from cache
      # Your job code here

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Scan Back-End
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      # Checkout code from git
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |               
            aws cloudformation deploy \
               --template-file  .circleci/files/backend.yml \
               --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
               --tags project=udapeople 
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo $(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text) >> ~/project/.circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment :
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    

  configure-infrastructure:
    docker:
       - image: python:3.10-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["f2:08:a8:8f:66:c3:95:58:e1:f2:2a:36:59:d1:79:12"] 

      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add --update ansible tar gzip curl nodejs npm openssh-client git
            pip install awscli
            pip --version
            aws --version
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml

      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   

  run-migrations:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip curl nodejs npm openssh-client git
            pip install awscli
            aws --version
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations >> migrations_dump.txt
            ls -ls
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                # If you are using kvdb.io, generate the bucket ID "MYFraaU6BVZSEVAq6i97f4" in your local terminal first
                curl https://kvdb.io/MYFraaU6BVZSEVAq6i97f4/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible tar gzip curl nodejs npm openssh-client git 
            pip install awscli
            aws --version
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text)
                
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          workflow_id : "${CIRCLE_WORKFLOW_ID:0:7}"      
                    
  deploy-backend:
    docker:
       - image: python:3.10-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["f2:08:a8:8f:66:c3:95:58:e1:f2:2a:36:59:d1:79:12"] 

      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            # Your code here
            # add environment variables to server
            echo ENVIRONMENT=$ENVIRONMENT >> backend/.env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> backend/.env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
            cat backend/.env  

            apk add --update ansible tar gzip curl nodejs npm openssh-client git 
            pip install awscli
            aws --version
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            mkdir .circleci/ansible/roles/deploy/files/
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files/
            pwd
            ls -la
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure 
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - destroy-environment:
          workflow_id : "${CIRCLE_WORKFLOW_ID:0:7}"    
     
  smoke-test:
    docker:
      # Lightweight Docker image
      - image: python:3.10-alpine3.16 
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache curl aws-cli tar gzip nodejs npm
      - run:
          name: Get backend url and Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
                --output text)
            echo ${BACKEND_IP}
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            sleep 3m
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment:
          workflow_id : ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id : ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)

            echo ${OldWorkflowID} >> ~/oldworkflowid.txt
            cat ~/oldworkflowid.txt

            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople

            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
      - persist_to_workspace:
          root: ~/
          paths:
            - oldworkflowid.txt
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id : ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id : ${CIRCLE_WORKFLOW_ID:0:7}
cleanup:
    docker:
      # Docker image here
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export STACKS=[] #put the list of stacks here
            export OldWorkflowID=$(cat ~/oldworkflowid.txt)
            echo "${OldWorkflowID}" 
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
              # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                      --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"  
      - run:
          name: Remove old stacks and files
          command: |
            cat ~/oldworkflowid.txt
            export OldWorkflowID=$(cat ~/oldworkflowid.txt)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo $OldWorkflowID
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
                echo "--------------------Delete Confirmed------------------------------"
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else 
                echo "------------------------Cannot Cleanup----------------------------"
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]